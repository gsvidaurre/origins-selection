#!/bin/bash
## G.Smith-Vidaurre
## 26 June 2020
## Updated 03 August 2020

## Purpose: Use kmer abundance patterns to remove reads representing rare and abundant kmers (which likely represent PCR or sequencing error and repetitive elemnts, respectively). The kmer_filter output can also be used to evaluate error rates and repeats in the paired-end libraries

#SBATCH --job-name PE_kmers
#SBATCH --partition normal ## default
#SBATCH --nodes 1 ## default
#SBATCH --ntasks 1 ## default
#SBATCH --cpus-per-task 32 ## number of threads, default is 1, changes ntasks, I still find that confusing
#SBATCH --mem-per-cpu 800M ## Default is 500M
#SBATCH --time 1-01:00:00 ## Must be specified, the default for this partition is 7 days 1 hour max walltime (7-01:00:00)
#SBATCH --mail-user gsmithvi@nmsu.edu
#SBATCH --mail-type BEGIN ## will get an email when job starts
#SBATCH --mail-type END ## will get an email when job ends
#SBATCH --mail-type FAIL ## will get email when job fails
#SBATCH --get-user-env ## wpass on environmental settings

module load stacks

# Use input files from clone_filter (PCR clones removed)
src=/scratch/gsmithvi/cleaned/clone_filter
out_path=/scratch/gsmithvi/cleaned/kmer_filter/paired_end

# Save the standard output and error to a file
log_file=$out_path/kmer_filter.oe

files=`for i in $src; do
        find $i*/ -type f -iname "*.1.1.fq.gz";
done`

for i in $files; do
	# echo $i; # checking

        # Run kmer_filter on demultiplexed reads, with filtering based on both rare (sequencing or PCR error) and abundant (repetitive loci) k-mers, default k-mer size of 15, no advanced filtering options and no read depth normalization
	kmer_filter -1 ${i%%.*}.1.1.fq.gz -2 ${i%%.*}.2.2.fq.gz -o $out_path -i gzfastq -D --k_len 15 --rare --abundant;

done &> $log_file
